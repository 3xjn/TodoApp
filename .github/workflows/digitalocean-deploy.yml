name: Build and Push Docker Image to DigitalOcean Droplet

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: "${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/*.csproj') }}"
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker Image Tag
        run: |
          echo "IMAGE_TAG=todoapp:$(date +%s)-${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          echo "Running Docker Compose..."
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          
          # Copy the PFX file to the Docker build context
          cp /home/${{ secrets.DROPLET_USERNAME }}/mycert.pfx .

          # Build the Docker image (without sensitive info)
          docker compose build

      - name: Save Docker image to a tar file
        run: |
          docker save ${{ env.IMAGE_TAG }} -o image.tar
          ls -lh image.tar

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Transfer docker image and docker-compose.yml
        run: |
          scp -i ~/.ssh/id_rsa image.tar ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }}:/home/${{ secrets.DROPLET_USERNAME }}/image.tar

      - name: Set Environment Variables
        run: |
          echo "CERT_PFX_PASS=$(cat /home/${{ secrets.DROPLET_USERNAME }}/certpass.txt)" >> $GITHUB_ENV
          echo "MONGO_CONNECTION_STRING=${{ secrets.MONGO_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "MONGO_DATABASE_NAME=${{ secrets.MONGO_DATABASE_NAME }}" >> $GITHUB_ENV
          echo "MONGO_COLLECTION_NAME=${{ secrets.MONGO_COLLECTION_NAME }}" >> $GITHUB_ENV

      - name: SSH into Droplet and Deploy using Docker Compose
        run: |
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -i ~/.ssh/id_rsa ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} << EOF
            set -e
            echo "Starting deployment process..."
            
            cd /home/${{ secrets.DROPLET_USERNAME }}
            echo "Current Directory: \$(pwd)"
            echo "Contents of the Directory:"
            ls -l
            
            # Stop and remove the existing container
            echo "Stopping existing container if it exists..."
            if [ "\$(sudo docker ps -q -f name=todo-app)" ]; then
              sudo docker compose down
            fi
            
            echo "Loading Docker image..."
            if [ -f /home/${{ secrets.DROPLET_USERNAME }}/image.tar ]; then
              sudo docker load -i /home/${{ secrets.DROPLET_USERNAME }}/image.tar
            else
              echo "image.tar not found, skipping load step"
            fi
            
            echo "Loaded Docker images:"
            sudo docker images
            
            echo "Running Docker Compose..."
            export IMAGE_TAG=${{ env.IMAGE_TAG }}

            # Set environment variables for sensitive data
            export CERT_PFX="/path/inside/container/mycert.pfx"
            export CERT_PFX_PASS="\$CERT_PFX_PASS"
            export MONGO_CONNECTION_STRING="\$MONGO_CONNECTION_STRING"
            export MONGO_DATABASE_NAME="\$MONGO_DATABASE_NAME"
            export MONGO_COLLECTION_NAME="\$MONGO_COLLECTION_NAME"

            # Run the Docker Compose command with sensitive data
            sudo docker compose up -d
            
            echo "Cleaning up..."
            rm -f /home/${{ secrets.DROPLET_USERNAME }}/image.tar
            
            echo "Deployment completed successfully!"
          EOF
