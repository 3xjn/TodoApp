name: Build and Push Docker Image to DigitalOcean Droplet

on:
  push:
    branches: [master, main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/*.py', '**/*.js') }}  # Adjust as necessary
          restore-keys: |
            ${{ runner.os }}-docker-
    
      - name: Set up Docker Image Tag
        run: |
          echo "IMAGE_TAG=todoapp:$(date +%s)-${GITHUB_SHA::8}" >> $GITHUB_ENV
    
      - name: Build Docker image
        run: |
          docker build --cache-from=type=local,src=/tmp/.docker-cache -t "${{ env.IMAGE_TAG }}" .
          echo "Docker image built successfully:"
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "todoapp" || echo "Warning: Image not found in list, but build completed"

      - name: Save Docker image to a tar file
        run: |
          docker save ${{ env.IMAGE_TAG }} -o image.tar
          ls -lh image.tar

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Transfer docker image
        run: |
          scp -i ~/.ssh/id_rsa image.tar ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }}:/home/${{ secrets.DROPLET_USERNAME }}/image.tar

      - name: SSH into Droplet and Deploy to Swarm
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} << EOF
            set -e
            echo "Initializing Docker Swarm if necessary..."
            sudo docker swarm init || echo "Swarm already initialized"

            echo "Loading Docker image..."
            sudo docker load -i /home/${{ secrets.DROPLET_USERNAME }}/image.tar

            echo "Creating or updating Docker secrets..."
            echo "${{ secrets.MONGO_CONNECTION_STRING }}" | sudo docker secret create --label todoapp mongo_connection_string --or-update
            echo "${{ secrets.MONGO_DATABASE_NAME }}" | sudo docker secret create --label todoapp mongo_database_name --or-update
            echo "${{ secrets.MONGO_COLLECTION_NAME }}" | sudo docker secret create --label todoapp mongo_collection_name --or-update

            echo "Deploying service to Docker Swarm..."
            sudo docker service update --force --image ${{ env.IMAGE_TAG }} \
              --name my-container --publish published=8081,target=8080 \
              --secret mongo_connection_string \
              --secret mongo_database_name \
              --secret mongo_collection_name || \
            sudo docker service create --name my-container --publish published=8081,target=8080 \
              --secret mongo_connection_string \
              --secret mongo_database_name \
              --secret mongo_collection_name \
              ${{ env.IMAGE_TAG }}

            echo "Cleaning up..."
            rm /home/${{ secrets.DROPLET_USERNAME }}/image.tar
            echo "Deployment completed successfully!"
          EOF
