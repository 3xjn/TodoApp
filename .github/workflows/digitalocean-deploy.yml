name: Build and Push Docker Image to DigitalOcean Droplet

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache Docker layers
        id: docker-cache
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.docker-cache
          key: "${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/*.csproj') }}"
          restore-keys: |
            ${{ runner.os }}-docker-
      - name: Set up Docker Image Tag
        run: |
          echo "IMAGE_TAG=todoapp:$(date +%s)-${GITHUB_SHA::8}" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          docker build --cache-from=type=local,src=/tmp/.docker-cache -t "${{ env.IMAGE_TAG }}" .
          echo "Docker image built successfully:"
          docker image ls --format "{{.Repository}}:{{.Tag}}" | grep "todoapp" || echo "Warning: Image not found in list, but build completed"
      - name: Save Docker image to a tar file
        run: |
          docker save ${{ env.IMAGE_TAG }} -o image.tar
          ls -lh image.tar
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
      - name: Transfer docker image
        run: |
          scp -i ~/.ssh/id_rsa image.tar ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }}:/home/${{ secrets.DROPLET_USERNAME }}/image.tar
      - name: SSH into Droplet and Deploy using Docker
        run: |-
          ssh -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -i ~/.ssh/id_rsa ${{ secrets.DROPLET_USERNAME }}@${{ secrets.DROPLET_IP }} << EOF
            set -e
            echo "Starting deployment process..."

            echo "Loading Docker image..."
            if [ -f /home/${{ secrets.DROPLET_USERNAME }}/image.tar ]; then
              sudo docker load -i /home/${{ secrets.DROPLET_USERNAME }}/image.tar || { echo "Failed to load Docker image"; exit 1; }
            else
              echo "image.tar not found, skipping load step"
            fi

            echo "Stopping and removing existing containers..."
            for container in my-container temp-container; do
              if sudo docker ps -a | grep -q "\$container"; then
                sudo docker stop \$container || echo "No \$container to stop"
                sudo docker rm \$container || echo "No \$container to remove"
              fi
            done

            echo "Running Docker container..."
            sudo docker run -d --name my-container \
              -p 443:443 -p 80:80 \
              --env MONGO__ConnectionString="${{ secrets.MONGO_CONNECTION_STRING }}" \
              --env MONGO__DatabaseName="${{ secrets.MONGO_DATABASE_NAME }}" \
              --env MONGO__CollectionName="${{ secrets.MONGO_COLLECTION_NAME }}" \
              --env CERT_PATH="/app/fullchain.pem" \
              --env KEY_PATH="/app/privkey.pem" \
              ${{ env.IMAGE_TAG }} || { echo "Failed to run Docker container"; exit 1; }

            echo "Deployment completed successfully!"
          EOF
